<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleMvvm</name>
    </assembly>
    <members>
        <member name="T:SimpleMvvm.Command.DelegateCommand">
            <summary>
            Defines delegate command.
            </summary>
        </member>
        <member name="E:SimpleMvvm.Command.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="P:SimpleMvvm.Command.DelegateCommand.CanExecute">
            <summary>
            Determines whether the command can execute in its current state.
            </summary>
        </member>
        <member name="P:SimpleMvvm.Command.DelegateCommand.Execute">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand.#ctor">
            <summary>
            Instantiate a DelegateCommand.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Instantiate a DelegateCommand with Execute Action.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand.#ctor(System.Action)">
            <summary>
            Instantiate a DelegateCommand with Execute Action.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand.op_Implicit(System.Action{System.Object})~SimpleMvvm.Command.DelegateCommand">
            <summary>
            Wraps the delegate as a command.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand.op_Implicit(System.Action)~SimpleMvvm.Command.DelegateCommand">
            <summary>
            Wraps the delegate as a command.
            </summary>
        </member>
        <member name="T:SimpleMvvm.Command.DelegateCommand`1">
            <summary>
            Defines delegate command without parameter.
            </summary>
        </member>
        <member name="P:SimpleMvvm.Command.DelegateCommand`1.Execute">
            <summary>
            The method to be called when the command is invoked.
            </summary>
        </member>
        <member name="P:SimpleMvvm.Command.DelegateCommand`1.ExecuteGeneric">
            <summary>
            Generic Execute delegate.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand`1.#ctor">
            <summary>
            Instantiate a generic DelegateCommand.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Instantiate a generic DelegateCommand with Execute Action.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Command.DelegateCommand`1.op_Implicit(System.Action{`0})~SimpleMvvm.Command.DelegateCommand{`0}">
            <summary>
            Wraps the delegate as a command.
            </summary>
        </member>
        <member name="T:SimpleMvvm.Locator.ViewModelLocatorBase">
            <summary>
            Base class for ViewModelLocator
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.Register``1(``0)">
            <summary>
            Register a ViewModel instance.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.Register``1(System.Boolean)">
            <summary>
            Register a ViewModel instance with a default constructor.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            Register a ViewModel instance with a factory method.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.Unregister``1">
            <summary>
            Unregister the ViewModel.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.GetInstance(System.Type)">
            <summary>
            Get the instance of ViewModel.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Locator.ViewModelLocatorBase.GetInstance``1">
            <summary>
            Get the instance of ViewModel.
            </summary>
        </member>
        <member name="T:SimpleMvvm.Messaging.Messenger">
            <summary>
            The Messenger is a class allowing objects to exchange messages.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Messaging.Messenger.Register(System.String,System.Action{System.Object})">
            <summary>
            Register a delegate to receive the message.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Messaging.Messenger.Unregister(System.String,System.Action{System.Object})">
            <summary>
            Unregister the delegate.
            </summary>
        </member>
        <member name="M:SimpleMvvm.Messaging.Messenger.Send(System.String,System.Object)">
            <summary>
            Send message.
            </summary>
        </member>
        <member name="P:SimpleMvvm.Messaging.Messenger.Global">
            <summary>
            Global messenger object.
            </summary>
        </member>
        <member name="T:SimpleMvvm.NotificationObject">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:SimpleMvvm.NotificationObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:SimpleMvvm.NotificationObject.RaisePropertyChanged(System.Object,System.String)">
            <summary>
            Notify property changed.
            </summary>
        </member>
        <member name="M:SimpleMvvm.NotificationObject.RaisePropertyChanged(System.String)">
            <summary>
            Notify property changed.
            </summary>
        </member>
        <member name="M:SimpleMvvm.NotificationObject.UpdateValue``1(``0@,``0,System.String)">
            <summary>
            Updates field value and notifies property changed.
            </summary>
        </member>
        <member name="T:SimpleMvvm.ViewModelBase">
            <summary>
            Base class for ViewModels.
            </summary>
        </member>
        <member name="M:SimpleMvvm.ViewModelBase.#ctor">
            <summary>
            Instantiate the ViewModel and call the Init method.
            </summary>
        </member>
        <member name="M:SimpleMvvm.ViewModelBase.SetUIThreadContext(System.Threading.SynchronizationContext)">
            <summary>
            Set the UI thread context.
            </summary>
        </member>
        <member name="M:SimpleMvvm.ViewModelBase.InvokeOnUIThread(System.Action,System.Boolean)">
            <summary>
            Invoke an action on the UI thread.
            </summary>
        </member>
        <member name="M:SimpleMvvm.ViewModelBase.Init">
            <summary>
            Use this method to initialize.
            </summary>
        </member>
    </members>
</doc>
